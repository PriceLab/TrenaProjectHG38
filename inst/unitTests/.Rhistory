source("test_col1a1.R"); runTests()
source("test_col1a1.R"); runTests()
source("test_col1a1.R"); runTests()
q()
source("test_col1a1.R"); runTests()
runTests()
is(col1a1)
DBI::dbGetQuery(genome.db, "select * from gtf limit 5")
DBI::dbGetQuery(genome.db, "select * from gtf where gene_name='COL1A1" limit 5")
DBI::dbGetQuery(genome.db, "select * from gtf where gene_name='COL1A1' limit 5")
DBI::dbGetQuery(genome.db, "select * from gtf where gene_name='COL1A1' and gene_biotype='gene_biotype' limit 5")
DBI::dbGetQuery(genome.db, "select * from gtf where gene_name='COL1A1' and gene_biotype='protein_coding' limit 5")
DBI::dbGetQuery(genome.db, "select * from gtf where gene_name='COL1A1' and gene_biotype='protein_coding' and moleculetype in (gene, transcript)  limit 5")
DBI::dbGetQuery(genome.db, "select * from gtf where gene_name='COL1A1' and gene_biotype='protein_coding' and moleculetype in ('gene', 'transcript')  limit 5")
DBI::dbGetQuery(genome.db, "select * from gtf where gene_name='COL1A1' and gene_biotype='protein_coding' and moleculetype in ('gene', 'transcript') ")
q()
source("test_col1a1.R"); runTests()
q()
source("test_col1a1.R"); runTests()
dim(tbl)
wdth(200)
tbl
wdth(3000)
tbl
transcript.lengths
q()
source("test_col1a1.R"); runTests()
q()
source("test_col1a1.R"); runTests()
q()
source("test_col1a1.R"); runTests()
   col1a1 <- TrenaGene("COL1A1", "hg38")

getExpressionMatrixNames()
getExpressionMatrixNames(col1a1)
q(0
)
source("test_col1a1.R"); runTests()
length(getExpressionMatrixNames(col1a1))
source("test_col1a1.R"); runTests()
source("test_col1a1.R"); runTests()
print(load("~/github/genomescale_scripts/geneHancer/v4.7/tbl.enhancers.allGenes.RData"))
dim(tbl.enhancers)
head(tbl.enhancers)
table(tbl.enhancers$chrom)
length(unique(tbl.enhancers$geneSymbol))
q()
source("test_col1a1.R")
dim(tbl.enhancers)
(tbl.enhancers)
colnames(tbl.enhancers)
dim(tbl.enhancers)
head(tbl.enhancers)
q()
source("test_col1a1.R")
q()
source("test_col1a1.R")
dim(tbl.dhs)
colnames(tbl.dhs)
matrix.names
source("test_col1a1.R"); runTests()
dim(tbl)
tbl
q()
dim(tbl)
tbl
transcript.lengths
matrix.names
dim(tbl.enhancers)
dim(tbl.dhs)
dim(tbl.dhs)
tbl.dhs
tbl.dhs$width <- with(tbl.dhs, 1 + chromEnd - chromStart)
tbl.dhs
tbl.enhancers
tbl.enhancers$width <- with(1 + end - start)
tbl.enhancers$width <- with(tbl.enhancers, 1 + end - start)
tbl.enhancers
source("test_col1a1.R"); runTests()
print(load("~/github/trenaGenePlacentaData/inst/extdata/SRP094910.RData"))
mtx[1:10, 1:10]
print(load("~/github/trenaGenePlacentaData/inst/extdata/FilteredCountData8282018.RData"))
is("GeneCountFiltered")
GeneCountFiltered[1:10, 1:10]
mtx <- as.matrix(GeneCountFiltered)
save(mtx, file= "~/github/trenaGenePlacentaData/inst/extdata/FilteredCountData8282018.RData")
q()
source("test_prg1.R"); runTests()
source("test_psg1.R"); runTests()
matrix.names
q()
source("test_psg1.R")
runTests()
matrix.names
dim(mtx)
mtz[1:10, 1:10]
mtx[1:10, 1:10]
hist(mtx)
  vst <- function(countdata){
    condition <- factor(rep("AD", ncol(countdata)))
    countdata <- newCountDataSet(countdata,condition )
    countdata <- estimateSizeFactors( countdata )
    cdsBlind <- DESeq::estimateDispersions( countdata, method="blind")
    vstdata <- varianceStabilizingTransformation( cdsBlind )
    return(exprs(vstdata))
    }

library(vsh)
library(vsn)
x <- vst(mtx)
library(DESeq)
biocGet
biocGet("DESeq")
n
library(DESeq)
x <- vst(mtx)
fivenum(mtx)
mtx[1:10, 1:10]
round(mtx[1:10, 1:10])
x <- vst(round(mtx))
fivenum(x)
x[1:10, 1:10]
library(limma)
q()
source("test_psg1.R"); runTests()
wdth(40); matrix.names; wdth(200)
q()
source("test_psg1.R"); runTests()
q()
source("test_col1a1.R); runTests()
source("test_col1a1.R"); runTests()
source("test_col1a1.R"); runTests()
q()
source("test_col1a1.R"); runTests()
dim(tbl.chipSeq)
       db <- dbConnect(dbDriver("SQLite"), "~/s/data/public/human/remap-2018/remap-all.sqlite")

library(RSQLite)
       db <- dbConnect(dbDriver("SQLite"), "~/s/data/public/human/remap-2018/remap-all.sqlite")

targetGene <- "PSG1"
query <- sprintf("select * from chipseq where tf='%s'", targetGene)
query
dbGetQuery(db, query)
targetGene <- "TREM2"
query <- sprintf("select * from chipseq where tf='%s'", targetGene)
dbGetQuery(db, query)
query <- sprintf("select * from chipseq limit 10")
dbGetQuery(db, query)
targetGene <- "ADNP"
query <- sprintf("select * from chipseq where tf='%s'", targetGene)
dbGetQuery(db, query)
targetGene
targetGene <- "PSG1"
targetGene <- "COL1A1"
col1a1
tbl.enhancers <- getEnhancers(col1a1)
tbl.enhancers
       chrom <- tbl.enhancers$chrom[1]
       loc.min <- min(tbl.enhancers$start) - 10000
       loc.max <- max(tbl.enhancers$end) + 10000

       db <- dbConnect(dbDriver("SQLite"), "~/s/data/public/human/remap-2018/remap-all.sqlite")
       query <- sprintf("select * from chipseq where chr=%s and start >= %d and end <= %d",
                        chrom, loc.min, loc.max)

query
query <- "select * from chipseq where chr='chr17' and start >= 49213094 and end <= 51178432"
tbl.chipSeq <- dbGetQuery(db, query)
dim(tbl.chipSeq)
head(tbl.chipSeq)
query
dim(tbl.enhancers)
(tbl.enhancers)
q()
source("test_col1a1.R"); runTests()
q()
source("test_TrenaProject"); runTests()
source("test_TrenaProject.R"); runTests()
q()
source("test_TrenaProject.R"); runTests()
library(TrenaProject)
library(TrenaProject)
runTests()
source("test_TrenaProject.R"); runTests()
q()
source("test_TrenaProject.R"); runTests()
q()
source("test_TrenaProject.R"); runTests()
q()
source("test_TrenaProject.R"); runTests()
source("test_TrenaProject.R"); runTests()
q()
source("test_TrenaProject.R"); runTests()
source("test_TrenaProject.R"); runTests()
source("test_TrenaProject.R"); runTests()
q()
source("test_TrenaProject.R"); 
q()
source("test_TrenaProject.R"); 
dim(tbl.transcripts)
ls(proj@state)
dim(proj@state$tbl.transcripts)
(proj@state$tbl.transcripts)
q()
source("test_TrenaProject.R"); 
q()
source("test_TrenaProject.R"); 
getTargetGene(proj)
ls(proj@state)
q()
source("test_TrenaProject.R"); 
proj@state$targetGene
stopifnot(NULL)
is(NULL)
!is(NULL)
is.null(proj@state$targetGene)
stopif
q()
source("test_TrenaProject.R"); 
dim(tbl.transcripts)
)
q()
source("test_TrenaProject.R"); 
expressionDirectory
variantsDirectory
covariatesFile
)
)
)
datasetName
datasestName
sprintf("%s.RData", file.path(obj@variantsDirectory, dataestName))
Q
getVariantDatasetNames(proj)
getVariantDatasetNames(proj)
q()
source("test_TrenaProject.R"); 
source("test_TrenaProject.R"); 
print(load("../extdata/covariates/dummyCovariates.RData"))
q()
source("test_TrenaProject.R"); test_ctor()
q()
source("test_TrenaProject.R"); t
source("test_TrenaProject.R"); test_ctor()
q()
source("test_TrenaProject.R"); runTests()
q()
source("test_TrenaProject.R"); runTests()
q()
source("test_TrenaProject.R"); runTests()
library(RSQLite)
x <- trena::parseChromLocString("chr6:41154324-41210533")
x
query <- sprintf("select * from chipseq where chr='%s' and start >= %d and end <= %d", x$chrom, x$start, x$end)
q()
source("test_TrenaProject.R"); 
source("test_TrenaProject.R"); runTests()
q()
